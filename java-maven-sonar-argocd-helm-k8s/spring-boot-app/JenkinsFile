pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "channamma/happyapp:${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        GIT_REPO = "https://github.com/channammarani586/devops.git"
        GIT_BRANCH = "feature1"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                deleteDir() // Clean workspace before checkout
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    set -e
                    echo "Listing project files..."
                    ls -ltr
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    echo "Running Maven build..."
                    mvn clean package
                '''
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh '''
                        set -e
                        export DOCKER_BUILDKIT=1
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        echo "Building Docker image: ${DOCKER_IMAGE}"
                        docker build -t ${DOCKER_IMAGE} .
                        echo "Logging into Docker Hub..."
                        echo "$REGISTRY_CREDENTIALS_PSW" | docker login -u "$REGISTRY_CREDENTIALS_USR" --password-stdin
                        echo "Pushing Docker image..."
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Update Deployment YAML') {
            steps {
                sh '''
                    set -e
                    echo "Updating deployment YAML with new image tag..."
                    sed -i "s|image:.*|image: ${DOCKER_IMAGE}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    echo "Updated Deployment YAML:"
                    cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                '''
            }
        }

        stage('Validate YAML') {
            steps {
                sh '''
                    set -e
                    echo "Checking if yamllint is installed..."
                    if ! command -v yamllint &> /dev/null; then
                        echo "Installing yamllint..."
                        sudo apt update && sudo apt install -y yamllint
                    fi
                    yamllint --version
                    echo "Validating YAML syntax..."
                    yamllint java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        set -e
                        export KUBECONFIG=$KUBECONFIG
                        echo "Applying Kubernetes deployment..."
                        kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/
                    '''
                }
            }
        }
    }
}
