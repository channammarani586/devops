pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "channamma/happyapp:${env.BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
    GIT_REPO_NAME = "devops"
    GIT_USER_NAME = "channammarani586"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'feature2', url: 'https://github.com/channammarani586/devops.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          set -e
          ls -ltr
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          mvn clean package
        '''
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            set -e
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            echo "Building Docker image: ${DOCKER_IMAGE}"
            docker build -t ${DOCKER_IMAGE} .

            echo "Listing Docker images..."
            docker images | grep happyapp

            echo "Logging in to Docker Hub..."
            echo "$REGISTRY_CREDENTIALS_PSW" | docker login -u "$REGISTRY_CREDENTIALS_USR" --password-stdin || exit 1

            echo "Pushing Docker image: ${DOCKER_IMAGE}"
            docker push ${DOCKER_IMAGE} || exit 1
          '''
        }
      }
    }

    stage('Update Deployment YAML') {
      steps {
        sh '''
          set -e
          sed -i "s|image: channamma/happyapp:.*|image: ${DOCKER_IMAGE}|" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
          cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
        '''
      }
    }

   stage('Deploy to Kubernetes') {
  steps {
    sh '''
      export KUBECONFIG=/var/lib/jenkins/.kube/config
      kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
      kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/service.yml
    '''
  }
}

      }
    }
  }
}
