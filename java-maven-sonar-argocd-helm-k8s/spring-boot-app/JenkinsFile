pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        DOCKER_IMAGE = "channamma/happyapp:${env.BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
        GIT_REPO = "https://github.com/channammarani586/devops.git"
        GIT_BRANCH = "main"
        GIT_USER_NAME = "channammarani586"
        GIT_REPO_NAME = "devops"
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                deleteDir() // Ensure workspace is clean
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    set -e
                    echo "Listing project files..."
                    ls -ltr
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    echo "Running Maven build..."
                    mvn clean package
                '''
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh '''
                        set -e
                        export DOCKER_BUILDKIT=1
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        echo "Building Docker image: ${DOCKER_IMAGE}"
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment YAML and Commit Changes') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        set -e
                        git config --global user.email "sbiradarchannamma@gmail.com"
                        git config --global user.name "${GIT_USER_NAME}"

                        echo "Updating deployment YAML with new image tag..."
                        sed -i "s|replaceImageTag|${DOCKER_IMAGE}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        echo "Committing changes..."
                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${DOCKER_IMAGE}"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:${GIT_BRANCH}
                    '''
                }
            }
        }

        stage('Validate YAML') {
            steps {
                sh '''
                    set -e
                    echo "Checking if yamllint is installed..."
                    if ! command -v yamllint &> /dev/null; then
                        echo "Installing yamllint..."
                        sudo apt update && sudo apt install -y yamllint
                    fi
                    yamllint --version
                    echo "Validating YAML syntax..."
                    yamllint java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        set -e
                        export KUBECONFIG=$KUBECONFIG
                        echo "Applying Kubernetes deployment..."
                        kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/
                    '''
                }
            }
        }
    }
}
