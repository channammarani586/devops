pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'channamma/happyapp:test'
        DOCKER_CREDENTIALS_ID = 'docker-cred' // Updated DockerHub credential ID
        GITHUB_CREDENTIALS_ID = 'github' // Added GitHub credential ID
        GITHUB_TOKEN_ID = 'github-token' // Added GitHub token ID
    }

    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                    sh '''
                    git config --global user.name "$GIT_USER"
                    git config --global user.password "$GIT_PASS"
                    git clone https://$GIT_USER:$GIT_PASS@github.com/your-repo/java-maven-sonar-argocd-helm-k8s.git
                    '''
                }
            }
        }

        stage('Build Maven Project') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {  
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push ${DOCKER_IMAGE}'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                sed -i "s|replaceImageTag|${DOCKER_IMAGE}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                '''
            }
        }
    }
}
