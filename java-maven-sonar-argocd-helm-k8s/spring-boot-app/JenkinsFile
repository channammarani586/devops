pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "channamma/happyapp:${BUILD_NUMBER}"
        HOME = "/var/jenkins_home"  // Ensure HOME is set for git config
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                checkout([$class: 'GitSCM', branches: [[name: 'main']], userRemoteConfigs: [[url: 'https://github.com/channammarani586/devops.git']]])
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh '''
                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                mvn clean package
                '''
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    docker build -t ${DOCKER_IMAGE} .
                    '''
                    
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "devops"
                GIT_USER_NAME = "channammarani586"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                    git config --global user.email "sbiradarchannamma@gmail.com"
                    git config --global user.name "channammarani586"
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG
                    kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/
                    '''
                }
            }
        }
    }
}
