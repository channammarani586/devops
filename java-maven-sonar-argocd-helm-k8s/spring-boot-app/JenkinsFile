pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "channamma/happyapp:${env.BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('docker-cred')
    GIT_REPO_NAME = "devops"
    GIT_USER_NAME = "channammarani586"
  }

  stages {
    stage('Checkout') {
      steps {
        echo 'Checking out source code...'
        git branch: 'main', url: 'https://github.com/channammarani586/devops.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh '''
          set -e
          echo "Listing project files..."
          ls -ltr
          cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
          echo "Running Maven build..."
          mvn clean package
        '''
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        script {
          sh '''
            set -e
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            echo "Building Docker image: ${DOCKER_IMAGE}"
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment YAML') {
      steps {
        sh '''
          set -e
          echo "Updating deployment YAML with new image tag..."
          sed -i "s|replaceImageTag|${DOCKER_IMAGE}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
          echo "Updated Deployment YAML:"
          cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
        '''
      }
    }

    stage('Install YAML Linter') {
      steps {
        sh '''
          set -e
          echo "Checking if yamllint is installed..."
          if ! command -v yamllint &> /dev/null; then
            echo "Installing yamllint using sudo..."
            echo "jenkins" | sudo -S apt update && sudo -S apt install -y yamllint || sudo -S yum install -y yamllint
          else
            echo "yamllint is already installed."
          fi
          yamllint --version
        '''
      }
    }

    stage('Debug YAML Formatting') {
      steps {
        sh '''
          set -e
          echo "Checking for tabs in YAML file..."
          cat -A java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

          echo "Replacing tabs with spaces (if any)..."
          expand -t 2 java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml > deployment_fixed.yml
          mv deployment_fixed.yml java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

          echo "Validating YAML syntax using Python..."
          python3 -c "import yaml; yaml.safe_load(open('java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml'))"
        '''
      }
    }

    stage('Validate YAML') {
      steps {
        sh '''
          set -e
          echo "Validating YAML syntax using yamllint..."
          yamllint java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml || exit 1
        '''
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh '''
          set -e
          echo "Applying Kubernetes deployment..."
          kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml || exit 1
        '''
      }
    }
  }
}
