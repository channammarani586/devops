pipeline {
  agent {
    label 'docker-agent' // Replace with your Jenkins agent label that supports Docker
  }

  environment {
    DOCKER_IMAGE = "channamma/happyapp:${BUILD_NUMBER}"
    GIT_REPO_NAME = "devops"
    GIT_USER_NAME = "channammarani586"
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo Checkout Step Passed'
        git branch: 'main', url: 'https://github.com/channammarani586/devops.git'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "sbiradarchannamma@gmail.com"
            git config user.name "channammarani586"

            # Replace image tag in deployment.yml
            sed -i "s|channamma/happyapp:.*|channamma/happyapp:${BUILD_NUMBER}|g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/service.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        script {
          sh '''
            echo "Deploying application to Kubernetes..."
            kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            kubectl apply -f java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/service.yml
          '''
        }
      }
    }
  }

  post {
    always {
      cleanWs() // Clears workspace before the next build
    }
  }
}
